import math
import time

class SceneTransitions:
    """Sistema de transi√ß√µes cinematogr√°ficas entre cenas"""
    
    def __init__(self, scene_manager):
        """Sistema de transi√ß√µes cinematogr√°ficas entre cenas"""
        self.scene_manager = scene_manager
        
        # üîß VERIFICA SE C√ÇMERA E RENDERER EXISTEM
        if hasattr(scene_manager, 'camera') and scene_manager.camera:
            self.camera = scene_manager.camera
        else:
            self.camera = None
            print("‚ö†Ô∏è C√¢mera n√£o dispon√≠vel no momento da cria√ß√£o das transi√ß√µes")
        
        if hasattr(scene_manager, 'renderer') and scene_manager.renderer:
            self.renderer = scene_manager.renderer
        else:
            self.renderer = None
            print("‚ö†Ô∏è Renderer n√£o dispon√≠vel no momento da cria√ß√£o das transi√ß√µes")
        
        # üé¨ Estado da transi√ß√£o
        self.transition_active = False
        self.transition_type = None
        self.transition_progress = 0.0
        self.transition_duration = 5.0  # ‚Üê SEMPRE 5 segundos
        self.transition_start_time = 0.0
        
        # üì∑ C√¢mera para transi√ß√µes
        self.transition_camera_start = None
        self.transition_camera_end = None
        
        # üé® Efeitos visuais
        self.fade_alpha = 0.0
        self.original_background_color = None
        
        # üßπ LIMPEZA DE CENA
        self.scene_cleaned = False
    
    def update_references(self, camera, renderer):
        """Atualiza refer√™ncias de c√¢mera e renderer ap√≥s inicializa√ß√£o"""
        self.camera = camera
        self.renderer = renderer
        print("‚úÖ Refer√™ncias de c√¢mera e renderer atualizadas no sistema de transi√ß√µes")
        
    def start_transition(self, transition_type="fade_black", duration=5.0):
        """Inicia uma transi√ß√£o espec√≠fica - SEMPRE 5s e limpa cena primeiro"""
        print(f"üåü INICIANDO TRANSI√á√ÉO: {transition_type}")
        
        # üßπ LIMPA CENA IMEDIATAMENTE
        self._cleanup_scene_immediately()
        
        # üé¨ CONFIGURA TRANSI√á√ÉO
        self.transition_active = True
        self.transition_type = transition_type
        self.transition_duration = 5.0  # ‚Üê FOR√áA 5 segundos sempre
        self.transition_progress = 0.0
        self.transition_start_time = time.time()
        self.scene_cleaned = True
        
        # Salva cor de fundo original
        if self.renderer and hasattr(self.renderer, 'background_color'):
            self.original_background_color = self.renderer.background_color.copy()
        
        print(f"üåü TRANSI√á√ÉO CONFIGURADA: {transition_type} (SEMPRE 5.0s)")
        
        # Configura transi√ß√£o espec√≠fica - todas s√£o FADE BLACK simples
        self._setup_simple_fade_transition()
    
    def _cleanup_scene_immediately(self):
        """LIMPA TUDO da scene imediatamente"""
        print("üßπ LIMPEZA COMPLETA DA SCENE - INICIANDO...")
        
        if not hasattr(self.scene_manager, 'scene') or not self.scene_manager.scene:
            print("‚ùå Scene n√£o encontrada")
            return
        
        try:
            scene = self.scene_manager.scene
            objects_to_remove = []
            
            # üóëÔ∏è COLETA TODOS OS OBJETOS para remover
            for obj in scene.children:
                # Preserva apenas c√¢mera e camera_rig
                if (obj != self.scene_manager.camera and 
                    obj != getattr(self.scene_manager, 'camera_rig', None)):
                    objects_to_remove.append(obj)
            
            # üóëÔ∏è REMOVE TODOS OS OBJETOS
            removed_count = 0
            for obj in objects_to_remove:
                try:
                    scene.remove(obj)
                    removed_count += 1
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erro ao remover {type(obj).__name__}: {e}")
            
            print(f"‚úÖ LIMPEZA COMPLETA: {removed_count} objetos removidos")
            
            # üîß RESET REFERENCIAS DO SCENE MANAGER
            if hasattr(self.scene_manager, 'humano'):
                self.scene_manager.humano = None
            if hasattr(self.scene_manager, 'human_scene_reference'):
                self.scene_manager.human_scene_reference = None
            if hasattr(self.scene_manager, 'manual_control_enabled'):
                self.scene_manager.manual_control_enabled = False
            
            # üîß RESET OBJETOS ESPEC√çFICOS
            reset_objects = ['sala_musica', 'cozinha', 'quarto', 'rally_terrain', 'rally_car']
            for obj_name in reset_objects:
                if hasattr(self.scene_manager, obj_name):
                    setattr(self.scene_manager, obj_name, None)
            
            print("‚úÖ Scene completamente limpa - apenas c√¢mera permanece")
            
        except Exception as e:
            print(f"‚ùå Erro na limpeza da scene: {e}")
    
    def _setup_simple_fade_transition(self):
        """Configura transi√ß√£o FADE simples - sempre igual"""
        self.fade_alpha = 0.0
        
        # üåë TELA PRETA IMEDIATAMENTE
        if self.renderer and hasattr(self.renderer, 'background_color'):
            self.renderer.background_color = [0.0, 0.0, 0.0]  # Preto total
        
        print("   üåë Fade simples configurado - 5s de tela preta")
    
    def update(self, delta_time):
        """Atualiza transi√ß√£o ativa"""
        if not self.transition_active:
            return False
        
        # Atualiza progresso
        elapsed_time = time.time() - self.transition_start_time
        self.transition_progress = min(1.0, elapsed_time / self.transition_duration)
        
        # üåë APLICA FADE SIMPLES (sempre igual)
        self._update_simple_fade_transition()
        
        # Debug do progresso
        if int(elapsed_time) != int(elapsed_time - delta_time):  # A cada segundo
            remaining = self.transition_duration - elapsed_time
            print(f"üåü Transi√ß√£o: {elapsed_time:.1f}s / {self.transition_duration}s (restam {remaining:.1f}s)")
        
        # Verifica se terminou
        if self.transition_progress >= 1.0:
            self._finish_transition()
            return True  # Transi√ß√£o conclu√≠da
        
        return False  # Ainda em progresso
    
    def _update_simple_fade_transition(self):
        """Atualiza fade simples - 5s de tela preta"""
        # üåë MANT√âM TELA PRETA durante toda a transi√ß√£o
        if self.renderer and hasattr(self.renderer, 'background_color'):
            # Ligeira varia√ß√£o de intensidade para efeito sutil
            intensity = 0.02 * math.sin(self.transition_progress * math.pi * 4)  # Pulsa√ß√£o sutil
            self.renderer.background_color = [intensity, intensity, intensity]
    
    def _finish_transition(self):
        """Finaliza transi√ß√£o"""
        self.transition_active = False
        self.scene_cleaned = False
        
        # üîß RESTAURA COR DE FUNDO PADR√ÉO
        if self.renderer and hasattr(self.renderer, 'background_color'):
            # Restaura cor padr√£o do renderer (cinza escuro)
            self.renderer.background_color = [0.1, 0.1, 0.1]
        
        print(f"‚úÖ TRANSI√á√ÉO CONCLU√çDA - Scene limpa e pronta para pr√≥xima cena")
        
    def is_active(self):
        """Verifica se h√° transi√ß√£o ativa"""
        return self.transition_active

# üé¨ PRESETS DE TRANSI√á√ïES SIMPLIFICADOS
class TransitionPresets:
    """Presets de transi√ß√µes - TODOS iguais (5s fade black)"""
    
    @staticmethod
    def get_scene_transition(from_scene_type, to_scene_type):
        """Retorna transi√ß√£o - SEMPRE igual (5s fade black)"""
        return {
            "type": "fade_black",
            "duration": 5.0,  # ‚Üê SEMPRE 5 segundos
            "description": f"Transi√ß√£o {from_scene_type} ‚Üí {to_scene_type} (5s tela preta)"
        }
    
    @staticmethod
    def get_emotional_transition(emotion_from, emotion_to):
        """Retorna transi√ß√£o emocional - SEMPRE igual (5s fade black)"""
        return {
            "type": "fade_black",
            "duration": 5.0,  # ‚Üê SEMPRE 5 segundos
            "description": f"Transi√ß√£o emocional {emotion_from} ‚Üí {emotion_to} (5s tela preta)"
        }